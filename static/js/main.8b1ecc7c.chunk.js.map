{"version":3,"sources":["components/Nav.js","components/Svieslente.js","components/Administracija.js","components/Specialistas.js","components/Pagrindinis.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","style","to","className","Svieslente","props","loadFromLocalStorageToState","namesToDisplay","this","stateOfData","filter","ele","aptarnauta","options","map","specialist","uniqueItemsObjectArray","Set","itemArrayBySpecialist","specialistObject","specialistString","Object","keys","arrayOfItemsByspecialist","push","uniqid","require","itemArrayBySpecialistFormated","key","item","uid","first_name","last_name","React","Component","Administracija","state","isLocalStorageEmpty","localStorage","getItem","Names","SignupSchema","Yup","shape","min","max","required","email","onClick","loadFromJsonToState","Boolean","length","saveStateToLocalStorage","deleteStateFromLocalStorage","initialValues","validationSchema","onSubmit","values","addItemToStateAndLocalStorage","errors","touched","name","type","Specialistas","handleChange","selectedOption","setState","uniqueItems","value","label","selectedListFilter","selectedList","firstOneOntheList","btnAptarnauti","removeItemFromStateAndLocalStorage","moveItemToCompleted","menuPlacement","menuPosition","onChange","undefined","Pagrindinis","console","log","isThereData","btnGotoadmin","successfullyLoadedLocalStorage","buttonToLoad","App","data","bind","currentStateString","JSON","stringify","setItem","loaded","forceUpdate","parse","removeItem","filtered","objIndex","findIndex","obj","updatedObj","updatedComplete","slice","completed","flatComplete","flatten","list","reduce","a","b","concat","Array","isArray","shift","currentState","path","render","exact","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b1ecc7c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nfunction Nav() {\n  const navStyle = {\n    color: \"white\"\n  };\n  return (\n    <nav>\n      <Link style={navStyle} to=\"/\">\n        <h3>Pagrindinis</h3>\n      </Link>\n      <ul className=\"nav-links\">\n        <Link style={navStyle} to=\"/components/Svieslente\">\n          <li>Svieslente</li>\n        </Link>\n        <Link style={navStyle} to=\"/components/Administracija\">\n          <li>Administracija</li>\n        </Link>\n        <Link style={navStyle} to=\"/components/Specialistas\">\n          <li>Specialistas</li>\n        </Link>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Svieslente extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.loadFromLocalStorageToState();\n  }\n\n  render() {\n    let stateOfData =\n      this.props.stateOfData === null ? [] : this.props.stateOfData;\n\n    const namesToDisplay = stateOfData.filter(ele => ele.aptarnauta !== true);\n\n    let options = namesToDisplay.map(ele => ele.specialist);\n    let uniqueItems = [...new Set(options)].map(ele => ele);\n    const uniqueItemsObjectArray = uniqueItems.map(ele => ({ [ele]: [] }));\n\n    let itemArrayBySpecialist = [];\n    // neefektyvus algoritmas\n    // [{spec1:[{1},{2},{3}]},{spec2:[{1},{2},{3}]}]\n\n    for (const specialistObject of uniqueItemsObjectArray) {\n      let specialistString = Object.keys(specialistObject)[0];\n      let arrayOfItemsByspecialist = namesToDisplay.filter(\n        ele => ele.specialist === specialistString\n      );\n      specialistObject[[specialistString]] = arrayOfItemsByspecialist;\n      itemArrayBySpecialist.push(specialistObject);\n    }\n\n    // console.log(itemArrayBySpecialist);\n    // console.log(\"namesToDisplay\");\n    let uniqid = require(\"uniqid\");\n\n    const itemArrayBySpecialistFormated = itemArrayBySpecialist.map(ele => (\n      <div key={uniqid()}>\n        <h1>{Object.keys(ele)[0]}</h1>\n        {ele[Object.keys(ele)[0]].map(item => (\n          <div key={item.uid} className=\"boxes\">\n            <h2>{item.first_name}</h2>\n            <p>{item.last_name}</p>\n            <p>{item.uid}</p>\n          </div>\n        ))}\n      </div>\n    ));\n    return (\n      <div className=\"App\">\n        <h1>Svieslente</h1>\n        {/* {itemArrayBySpecialistFormated} */}\n        <div className=\"gridContainer\">{itemArrayBySpecialistFormated}</div>\n      </div>\n    );\n  }\n}\n\nexport default Svieslente;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// import ValidationSchema from \"./AdminLogic/AdminLogic\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nclass Administracija extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLocalStorageEmpty: localStorage.getItem(\"data\")\n    };\n  }\n\n  // let isArrayWithLength = Boolean(Array.isArray(array) && array.length)\n  render() {\n    let stateOfData =\n      this.props.stateOfData === null ? [] : this.props.stateOfData;\n\n    const Names = stateOfData.map(ele => (\n      <div key={ele.uid} className=\"adminBoxes\">\n        <h1>{ele.first_name}</h1>\n        <p>specialist: {ele.specialist}</p>\n        <p>id: {ele.uid}</p>\n      </div>\n    ));\n\n    // formik\n\n    const SignupSchema = Yup.object().shape({\n      first_name: Yup.string()\n        .min(2, \"Per mažai raidžių!\")\n        .max(50, \"Per daug raidžių!\")\n        .required(\"Privalomas laukas\"),\n      last_name: Yup.string()\n        .min(2, \"Per mažai raidžių!\")\n        .max(50, \"Per daug raidžių!\")\n        .required(\"Privalomas laukas\"),\n      email: Yup.string()\n        .email(\"neteisingas el paštas\")\n        .required(\"Privalomas laukas\"),\n      specialist: Yup.string()\n        .min(2, \"Per mažai raidžių!\")\n        .max(50, \"Per daug raidžių!\")\n        .required(\"Privalomas laukas\")\n    });\n\n    const ValidationSchema = () => (\n      <div>\n        <h1>Prideti klienta</h1>\n        <Formik\n          initialValues={{\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\",\n            specialist: \"\"\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={values => {\n            // same shape as initial values\n\n            this.props.addItemToStateAndLocalStorage(values);\n          }}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <div>vardas</div>\n              <Field name=\"first_name\" />\n              {errors.first_name && touched.first_name ? (\n                <div className=\"error\">{errors.first_name}</div>\n              ) : null}\n              <div>pavarde</div>\n              <Field name=\"last_name\" />\n              {errors.last_name && touched.last_name ? (\n                <div className=\"error\">{errors.last_name}</div>\n              ) : null}\n              <div>el paštas</div>\n              <Field name=\"email\" type=\"email\" />\n              {errors.email && touched.email ? (\n                <div className=\"error\">{errors.email}</div>\n              ) : null}\n              <div>norimas specialistas</div>\n              <Field name=\"specialist\" />\n              {errors.specialist && touched.specialist ? (\n                <div className=\"error\">{errors.specialist}</div>\n              ) : null}\n              <div></div>\n              <button type=\"submit\">Submit</button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n\n    // end formik\n    return (\n      <div className=\"AdminPage\">\n        <h1>admin page</h1>\n        <div className=\"AdminPageContainer\">\n          <div>\n            <button onClick={this.props.loadFromJsonToState}>\n              load from json to state\n            </button>\n            {this.state.isLocalStorageEmpty ? (\n              <button onClick={this.props.loadFromLocalStorageToState}>\n                load from localStorage to state\n              </button>\n            ) : (\n              \"\"\n            )}\n            {Boolean(stateOfData.length) ? (\n              <button onClick={this.props.saveStateToLocalStorage}>\n                save state to localStorage\n              </button>\n            ) : (\n              \"\"\n            )}\n            <button onClick={this.props.deleteStateFromLocalStorage}>\n              delete state from localStorage\n            </button>\n            <ValidationSchema />\n          </div>\n          <div>{Names}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Administracija;\n","import React from \"react\";\nimport Select from \"react-select\";\n\nclass Specialistas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props.loadFromLocalStorageToState();\n    this.state = {\n      selectedOption: \"\"\n    };\n  }\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n  // return { value: ele.specialist, label: ele.specialist };\n  render() {\n    // tikrinti ar yra duomenys\n    let stateOfData =\n      this.props.stateOfData === null ? [] : this.props.stateOfData;\n    let options = stateOfData.map(ele => ele.specialist);\n\n    let uniqueItems = [...new Set(options)].map(ele => {\n      return { value: ele, label: ele };\n    });\n\n    const { selectedOption } = this.state;\n\n    const selectedListFilter = stateOfData.filter(\n      ele => ele.specialist === selectedOption.value && ele.aptarnauta !== true\n    );\n\n    const selectedList = selectedListFilter.map(ele => (\n      <div key={ele.uid}>\n        <h2>{ele.uid}</h2>\n        <p>{ele.first_name}</p>\n        <p>{ele.specialist}</p>\n      </div>\n    ));\n\n    // Boolean(Array.isArray(array) && array.length)\n    const firstOneOntheList = selectedList[0];\n    const btnAptarnauti = (\n      <div>\n        <button\n          onClick={() =>\n            this.props.removeItemFromStateAndLocalStorage(\n              selectedListFilter[0].uid\n            )\n          }\n        >\n          Aptarnautas(istrinti)\n        </button>\n        <button\n          onClick={() =>\n            this.props.moveItemToCompleted(selectedListFilter[0].uid)\n          }\n        >\n          Aptarnautas(pazymeti kad aptarnautas)\n        </button>\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Specialistas Page</h1>\n        <button onClick={this.props.loadFromJsonToState}>\n          load from json to state\n        </button>\n        <div className=\"spec\">\n          <Select\n            menuPlacement=\"auto\"\n            menuPosition=\"fixed\"\n            value={selectedOption}\n            onChange={this.handleChange}\n            options={uniqueItems}\n          />\n\n          {selectedListFilter[0] === undefined ? (\n            <h1>pasirinkti specialista</h1>\n          ) : (\n            btnAptarnauti\n          )}\n\n          <div>\n            <h1>Aptarnaujamas klientas</h1>\n            {firstOneOntheList}\n          </div>\n\n          <div className=\"specList\">{selectedList}</div>\n        </div>\n        {/* <p>{newUid}</p> */}\n      </div>\n    );\n  }\n}\n\nexport default Specialistas;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Pagrindinis extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      isThereData: localStorage.getItem(\"data\") ? true : false\n    };\n  }\n  render() {\n    console.log(this.state.isThereData);\n\n    const btnGotoadmin = (\n      <Link to=\"/components/Administracija\">\n        <button>ikelti duomenis</button>\n      </Link>\n    );\n\n    const successfullyLoadedLocalStorage = (\n      <div className=\"pagrLinkContainer\">\n        <Link className=\"pagrLink\" to=\"/components/Svieslente\">\n          <h2>Svieslente</h2>\n        </Link>\n        <Link className=\"pagrLink\" to=\"/components/Administracija\">\n          <h2>Administracija</h2>\n        </Link>\n        <Link className=\"pagrLink\" to=\"/components/Specialistas\">\n          <h2>Specialistas</h2>\n        </Link>\n      </div>\n    );\n    const buttonToLoad = (\n      <button onClick={this.props.loadFromLocalStorageToState}>\n        load from localStorage to state\n      </button>\n    );\n    return (\n      <div className=\"App\">\n        {this.props.stateOfData && this.props.stateOfData.length\n          ? buttonToLoad\n          : \" \"}\n        {this.state.isThereData ? successfullyLoadedLocalStorage : btnGotoadmin}\n      </div>\n    );\n  }\n}\n\nexport default Pagrindinis;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport Svieslente from \"./components/Svieslente\";\nimport Administracija from \"./components/Administracija\";\n\nimport Specialistas from \"./components/Specialistas\";\nimport Pagrindinis from \"./components/Pagrindinis\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n    this.loadFromJsonToState = this.loadFromJsonToState.bind(this);\n    this.moveItemToCompleted = this.moveItemToCompleted.bind(this);\n    this.addItemToStateAndLocalStorage = this.addItemToStateAndLocalStorage.bind(\n      this\n    );\n    this.removeItemFromStateAndLocalStorage = this.removeItemFromStateAndLocalStorage.bind(\n      this\n    );\n    this.saveStateToLocalStorage = this.saveStateToLocalStorage.bind(this);\n    this.deleteStateFromLocalStorage = this.deleteStateFromLocalStorage.bind(\n      this\n    );\n    this.loadFromLocalStorageToState = this.loadFromLocalStorageToState.bind(\n      this\n    );\n  }\n\n  saveStateToLocalStorage() {\n    const currentStateString = JSON.stringify(this.state.data);\n    localStorage.setItem(\"data\", currentStateString);\n  }\n  loadFromJsonToState() {\n    let loaded = require(\"./components/AdminLogic/data.json\");\n    // console.log(loaded);\n    this.setState(\n      {\n        data: loaded\n      },\n      () => {\n        localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n      }\n    );\n    this.forceUpdate();\n  }\n\n  loadFromLocalStorageToState() {\n    const data = JSON.parse(localStorage.getItem(\"data\"));\n    this.setState({\n      data: data\n    });\n  }\n\n  deleteStateFromLocalStorage() {\n    localStorage.removeItem(\"data\");\n    localStorage.removeItem(\"completed\");\n  }\n\n  removeItemFromStateAndLocalStorage(value) {\n    const filtered = this.state.data.filter(ele => ele.uid !== value);\n    // console.log(filtered);\n    this.setState({ data: filtered }, () => {\n      localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n    });\n  }\n\n  moveItemToCompleted(value) {\n    //find the index of object from array that you want to update\n    const objIndex = this.state.data.findIndex(obj => obj.uid === value);\n    // make new object of updated object.\n    const updatedObj = { ...this.state.data[objIndex], aptarnauta: true };\n    // make final new array of objects by combining updated object.\n    const updatedComplete = [\n      ...this.state.data.slice(0, objIndex),\n      updatedObj,\n      ...this.state.data.slice(objIndex + 1)\n    ];\n    this.setState({ data: updatedComplete }, () => {\n      localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n      const completed = [JSON.parse(localStorage.getItem(\"completed\"))];\n      completed.push(updatedObj);\n      const flatten = list =>\n        list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n      let flatComplete = flatten(completed);\n      flatComplete[0] === null && flatComplete.shift();\n      localStorage.setItem(\"completed\", JSON.stringify(flatComplete));\n    });\n  }\n  addItemToStateAndLocalStorage(value) {\n    let uniqid = require(\"uniqid\");\n    value[\"uid\"] = uniqid();\n\n    let currentState = this.state.data;\n    currentState.push(value);\n    this.setState({ data: currentState }, () => {\n      localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n    });\n  }\n\n  render() {\n    // console.log(\"current state\");\n    // console.log(this.state.data);\n    // console.log(\"current state\");\n    return (\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Switch>\n            <Route\n              path=\"/\"\n              // exact\n              render={() => (\n                <Pagrindinis\n                  stateOfData={this.state.data}\n                  loadFromLocalStorageToState={this.loadFromLocalStorageToState}\n                />\n              )}\n            />\n\n            <Route\n              path=\"/components/Administracija\"\n              render={() => (\n                <Administracija\n                  stateOfData={this.state.data}\n                  loadFromJsonToState={this.loadFromJsonToState}\n                  saveStateToLocalStorage={this.saveStateToLocalStorage}\n                  loadFromLocalStorageToState={this.loadFromLocalStorageToState}\n                  deleteStateFromLocalStorage={this.deleteStateFromLocalStorage}\n                  addItemToStateAndLocalStorage={\n                    this.addItemToStateAndLocalStorage\n                  }\n                />\n              )}\n            />\n            <Route\n              path=\"/components/Specialistas\"\n              render={() => (\n                <Specialistas\n                  stateOfData={this.state.data}\n                  handleChange={this.handleChange}\n                  loadFromJsonToState={this.loadFromJsonToState}\n                  loadFromLocalStorageToState={this.loadFromLocalStorageToState}\n                  moveItemToCompleted={this.moveItemToCompleted}\n                  removeItemFromStateAndLocalStorage={\n                    this.removeItemFromStateAndLocalStorage\n                  }\n                />\n              )}\n            />\n            {/* <Route path=\"/components/Svieslente\" component={Svieslente} /> */}\n            <Route\n              path=\"/components/Svieslente\"\n              exact\n              render={() => (\n                <Svieslente\n                  stateOfData={this.state.data}\n                  loadFromLocalStorageToState={this.loadFromLocalStorageToState}\n                />\n              )}\n            />\n            {/* <Route path=\"/shop/:id\" component={ItemDetail} /> */}\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n\n// <Route path=\"/homepage\" render={props =>\n//   (<Homepage {...props} pieceOfState={this.state.pieceOfState}/>)\n// }/>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}